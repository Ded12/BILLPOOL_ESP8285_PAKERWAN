#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <WiFiManager.h>
#include <EEPROM.h>

MDNSResponder mdns;
ESP8266WebServer server(80);

int Led = 13;
int Relay = 12;
int button = 0;
bool relayState = false;
int relayStatus;
bool lastButtonState = LOW;
bool currentButtonState;
unsigned long buttonPressTime = 0;
bool isButtonHeld = false;
unsigned long startTime = 0;
unsigned long lastReportedTime = 0; // Store the last reported second

// Function to save IP to EEPROM
// void saveIPToEEPROM(IPAddress ip) {
//   for (int i = 0; i < 4; i++) {
//     EEPROM.write(i, ip[i]);
//   }
//   EEPROM.commit();
//   Serial.print("IP saved to EEPROM: ");
//   Serial.println(ip);
// }

// // Function to read IP from EEPROM
// IPAddress readIPFromEEPROM() {
//   IPAddress ip;
//   for (int i = 0; i < 4; i++) {
//     ip[i] = EEPROM.read(i);
//   }
//   return ip;
// }
// Fungsi untuk membaca IP dari EEPROM
IPAddress readIPFromEEPROM(int startIndex)
{
  uint8_t bytes[4];
  for (int i = 0; i < 4; i++)
  {
    bytes[i] = EEPROM.read(startIndex + i);
  }
  return IPAddress(bytes);
}

// Fungsi untuk menyimpan IP ke EEPROM
void saveIPToEEPROM(IPAddress ip)
{
  for (int i = 0; i < 4; i++)
  {
    EEPROM.write(i, ip[i]);
  }
  EEPROM.commit();
}
// Function to clear EEPROM
void clearEEPROM()
{
  for (int i = 0; i < 512; i++)
  {
    EEPROM.write(i, 0);
  }
  EEPROM.commit();
  Serial.println("EEPROM cleared.");
}

IPAddress staticIP, staticGateway, staticSubnet, staticDNS;
void setup(void)
{
  pinMode(Led, OUTPUT);
  pinMode(Relay, OUTPUT);
  digitalWrite(Relay, LOW);
  pinMode(button, INPUT_PULLUP);
  relayState = false;
  relayStatus = 0;
  Serial.begin(115200);
  WiFiManager wifiManager;

  EEPROM.begin(512);

  // IPAddress savedIP = readIPFromEEPROM();
  staticIP = readIPFromEEPROM(0);
  staticGateway = readIPFromEEPROM(4);
  staticSubnet = readIPFromEEPROM(8);
  staticDNS = readIPFromEEPROM(12);
  if (staticIP != IPAddress(0, 0, 0, 0))
  {
    // staticIP = savedIP;
    Serial.print("IP dibaca dari EEPROM: ");
    Serial.println(staticIP);
  }
  else
  {
    // Jika IP di EEPROM tidak valid, gunakan IP default
    Serial.println("Tidak ada IP di EEPROM, menggunakan IP default.");
    staticIP = IPAddress(192, 168, 0, 0);       // IP default yang kamu inginkan
    staticGateway = IPAddress(192, 168, 0, 1);  // Pastikan gateway yang benar
    staticSubnet = IPAddress(255, 255, 255, 0); // Pastikan subnet yang benar
  }
  WiFi.begin(); // Hubungkan ke WiFi yang sudah disimpan
  Serial.println("Mencoba menghubungkan dengan IP yang disimpan...");

  // Loop untuk mencoba koneksi sampai berhasil
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");

    delay(1000); // Tunggu sebelum mencoba lagi
  }

  // Set static IP untuk mode AP
  IPAddress apIP(192, 168, 123, 1);
  IPAddress apGateway(192, 168, 123, 1);
  IPAddress apSubnet(255, 255, 255, 0);
  wifiManager.setAPStaticIPConfig(apIP, apGateway, apSubnet);

  // Matikan DHCP dan gunakan static IP untuk mode STA
  wifiManager.setSTAStaticIPConfig(staticIP, staticGateway, staticSubnet, staticDNS);

  // Timeout WiFiManager
  wifiManager.setTimeout(40);

  // Auto connect dengan kredensial
  if (!wifiManager.autoConnect("BREAK MASTER", "$billpool24"))
  {
    Serial.println("Gagal terkoneksi atau timeout.");
    delay(3000);
    ESP.restart();
  }

  // Simpan IP ke EEPROM setelah berhasil terhubung ke WiFi
  if (WiFi.status() == WL_CONNECTED)
  {
    Serial.println("Terhubung ke WiFi.");
    analogWrite(Led, 20);
    saveIPToEEPROM(WiFi.localIP()); // Simpan IP yang berhasil ke EEPROM
  }
  else
  {
    Serial.println("Gagal terhubung atau timeout. Berjalan dalam mode AP.");
    analogWrite(Led, 0);
  }

  // MDNS setup
  if (mdns.begin("BREAK MASTER", WiFi.localIP()))
  {
    Serial.println("MDNS responder dimulai");
  }
  // Web server setup
  server.on("/", []()
            { server.send(200, "application/json", "{\"message\": \"Send /on or /off to control the relay.\"}"); });

  // Relay ON command
  server.on("/on", []()
            {
    if (server.hasArg("password") && server.arg("password") == "1d2084d04e5f80725466a21434438ba2") {
      relayState = true;
      digitalWrite(Relay, HIGH);
      analogWrite(Led, 0);
      server.send(200, "application/json", "{\"status\": \"on\"}");
    } else {
      server.send(403, "application/json", "{\"status\": \"Incorrect password\"}");
    } });

  // Relay OFF command
  server.on("/off", []()
            {
    if (server.hasArg("password") && server.arg("password") == "1d2084d04e5f80725466a21434438ba2") {
      relayState = false;
      digitalWrite(Relay, LOW);
      analogWrite(Led, 1023);
      server.send(200, "application/json", "{\"status\": \"off\"}");
    } else {
      server.send(403, "application/json", "{\"status\": \"Incorrect password\"}");
    } });

  // Route to provide WiFi status
  server.on("/status", []()
            {
    if (server.hasArg("password")) {
      String receivedPassword = server.arg("password");
      if (receivedPassword == "1d2084d04e5f80725466a21434438ba2") {
        int wifiStatus = (WiFi.status() == WL_CONNECTED) ? 1 : 0;
        server.send(200, "application/json", "{\"status\": " + String(wifiStatus) + "}");
      } else {
        server.send(401, "application/json", "{\"status\": \"Unauthorized\"}");
      }
    } else {
      server.send(400, "application/json", "{\"status\": \"Bad Request\"}");
    } });

  //  server.on("/duration", []() {
  //   // Cek apakah parameter password disertakan
  //   if (server.hasArg("password") && server.arg("password") == "1d2084d04e5f80725466a21434438ba2") {
  //     if (relayState) {
  //       unsigned long currentTime = millis();

  //       // Hitung durasi dalam detik
  //       unsigned long elapsedTime = currentTime - startTime;
  //       int durationSeconds = elapsedTime / 1000; // Konversi dari milidetik ke detik

  //       // Format durasi dalam detik
  //       String durationStr = String(durationSeconds);

  //       // Cetak durasi ke Serial Monitor
  //       Serial.println("Relay ON for " + durationStr + " seconds.");

  //       server.send(200, "application/json", "{\"durasi\": " + durationStr + "}");
  //     } else {
  //       startTime = millis(); // Reset startTime saat relay dimatikan
  //       server.send(200, "application/json", "{\"durasi\": 0}");
  //     }
  //   } else {
  //      server.send(403, "application/json", "{\"status\": \"Incorrect password\"}");
  //   }
  // });

  server.on("/duration", []()
            {
  // Check if the password is provided
  if (server.hasArg("password") && server.arg("password") == "1d2084d04e5f80725466a21434438ba2") {
    if (relayState) {
      unsigned long currentTime = millis();
      
      // Calculate the elapsed time in seconds
      unsigned long elapsedTime = currentTime - startTime;
      unsigned long durationSeconds = elapsedTime / 1000; // Convert milliseconds to seconds
      
      // Only print if the duration has changed
      if (durationSeconds != lastReportedTime) {
        lastReportedTime = durationSeconds;  // Update the last reported time

        // Format the duration in seconds
        String durationStr = String(durationSeconds);
        
        // Print the duration to the Serial Monitor
        Serial.println("Relay ON for " + durationStr + " seconds.");
        
        server.send(200, "application/json", "{\"durasi\": " + durationStr + "}");
      }
    } else {
      startTime = millis(); // Reset startTime when the relay is turned off
      lastReportedTime = 0;  // Reset the last reported time
      server.send(200, "application/json", "{\"durasi\": 0}");
     
    }
  } else {
    server.send(403, "application/json", "{\"status\": \"Incorrect password\"}");
  } });
  // Route to provide relay status
  server.on("/relayStatus", []()
            {
    if (server.hasArg("password")) {
      String receivedPassword = server.arg("password");
      if (receivedPassword == "1d2084d04e5f80725466a21434438ba2") {
        String relayStatus = relayState ? "on" : "off"; // 1 if relay is ON, 0 if relay is OFF
        server.send(200, "application/json", "{\"status\": " + String(relayStatus) + "}");
      } else {
        server.send(403, "application/json", "{\"status\": \"Incorrect password\"}");
        
      }
    } else {
      server.send(400, "application/json", "{\"status\": \"Bad Request\"}");
    } });

  // Warning route: check relayState, if ON, turn off for specified seconds then turn it back on
  server.on("/warning", []()
            {
    if (server.hasArg("password") && server.arg("password") == "1d2084d04e5f80725466a21434438ba2") {
      if (relayState) {
        if (server.hasArg("duration")) {
          int duration = server.arg("duration").toInt(); // Get duration from parameter
          digitalWrite(Relay, LOW);
          analogWrite(Led, 1023);
          delay(duration * 1000);
          digitalWrite(Relay, HIGH);
          analogWrite(Led, 0);
          relayState = true;
          server.send(200, "application/json", "{\"durasi\": " + String(duration) + "}");
        } else {
          server.send(400, "application/json", "{\"status\": \"Missing duration parameter.\"}");
        }
      } else {
        server.send(200, "application/json", "{\"status\": \"Relay is already OFF, no action taken.\"}");
      }
    } else {
         server.send(403, "application/json", "{\"status\": \"Incorrect password\"}");
    } });

  server.begin();
  Serial.println("HTTP server started");

  relayStatus = relayState ? 1 : 0;
}

void loop(void)
{
  server.handleClient();

  currentButtonState = digitalRead(button);

  // Check if button is pressed (button is active low)
  if (currentButtonState == LOW && lastButtonState == HIGH)
  {
    buttonPressTime = millis(); // Store the time the button was pressed
    isButtonHeld = false;       // Reset the flag
  }

  // If button is being held
  if (currentButtonState == LOW && millis() - buttonPressTime > 5000 && !isButtonHeld)
  {
    Serial.println("Button held for 5 seconds. Resetting WiFi credentials...");
    WiFiManager wifiManager;
    wifiManager.resetSettings(); // Erase WiFi credentials
    clearEEPROM();
    ESP.restart();       // Restart the ESP to enter AP mode
    isButtonHeld = true; // Set the flag to prevent repeated action
  }

  // Button is released
  if (currentButtonState == LOW && lastButtonState == HIGH)
  {
    delay(50); // Debounce delay
    if (digitalRead(button) == LOW && !isButtonHeld)
    {
      relayState = !relayState;                     // Toggle relay state
      digitalWrite(Relay, relayState ? LOW : HIGH); // Update relay
      digitalWrite(Led, relayState ? HIGH : LOW);
    }
  }

  lastButtonState = currentButtonState; // Update button state
}